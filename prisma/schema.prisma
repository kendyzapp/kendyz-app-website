generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol", "postgresqlExtensions"]
}

datasource db {
    provider          = "postgresql"
    url               = env("POSTGRES_PRISMA_URL")
    directUrl         = env("POSTGRES_URL_NON_POOLING")
    shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
    extensions        = [postgis()]
}

model Category {
    name String @id

    Prestations Prestation[]

    @@map("categories")
}

model Rating {
    value     Int
    content   String
    createdAt DateTime @default(now()) @map("created_at")

    bookingId String  @id @map("booking_id")
    Booking   Booking @relation(fields: [bookingId], references: [id])

    @@map("ratings")
}

model Prestation {
    id          String   @id @default(cuid())
    name        String
    description String
    createdAt   DateTime @default(now()) @map("created_at")
    updatedAt   DateTime @updatedAt @map("updated_at")

    userId       String   @map("user_id")
    User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    categoryName String   @map("category_name")
    Category     Category @relation(fields: [categoryName], references: [name])

    coordinates Unsupported("geometry(Point, 4326)")?

    Images   Image[]
    Likes    PrestationLike[]
    Bookings Booking[]

    @@index([coordinates], name: "prestations_idx", type: Gist)
    @@map("prestations")
}

model PrestationLike {
    prestationId String @map("prestation_id")
    userId       String @map("user_id")

    Prestation Prestation @relation(fields: [prestationId], references: [id])
    User       User       @relation(fields: [userId], references: [id])

    @@id([prestationId, userId])
    @@map("prestation_likes")
}

model Image {
    url         String  @id
    blurDataUrl String? @map("blur_data_url")

    prestationId String     @map("prestation_id")
    Prestation   Prestation @relation(fields: [prestationId], references: [id], onDelete: Cascade)

    @@map("images")
}

model Booking {
    id          String   @id @default(cuid())
    description String
    date        DateTime

    coordinates Unsupported("geometry(Point, 4326)")?

    ratingId     Int?       @map("rating_id")
    Rating       Rating?
    prestationId String     @map("prestation_id")
    Prestation   Prestation @relation(fields: [prestationId], references: [id])
    clientId     String     @map("client_id")
    Client       User       @relation(fields: [clientId], references: [id])

    @@index([coordinates], name: "bookings_idx", type: Gist)
    @@map("bookings")
}

model User {
    id        String   @id @default(cuid())
    name      String?
    email     String?  @unique
    password  String
    image     String?
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    Prestations Prestation[]
    Likes       PrestationLike[]
    Bookings    Booking[]

    @@map("users")
}
