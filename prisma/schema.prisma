generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol", "postgresqlExtensions"]
}

datasource db {
    provider          = "postgresql"
    url               = env("POSTGRES_PRISMA_URL")
    directUrl         = env("POSTGRES_URL_NON_POOLING")
    shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
    extensions        = [postgis()]
}

model PrestationImage {
    url          String  @id
    blurDataUrl  String? @map("blur_data_url")
    prestationId String  @map("prestation_id")

    Prestation Prestation @relation(fields: [prestationId], references: [id], onDelete: Cascade)

    @@map("prestation_images")
}

model Category {
    name String @id

    Prestations Prestation[]

    @@map("categories")
}

model Rate {
    value        Int
    description  String
    userId       String   @map("user_id")
    prestationId String   @map("prestation_id")
    createdAt    DateTime @default(now()) @map("created_at")

    User       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    Prestation Prestation @relation(fields: [prestationId], references: [id], onDelete: Cascade)

    @@id([userId, prestationId])
    @@map("rates")
}

model Prestation {
    id           String   @id @default(cuid())
    name         String
    description  String
    categoryName String   @map("category_name")
    createdAt    DateTime @default(now()) @map("created_at")
    updatedAt    DateTime @updatedAt @map("updated_at")
    userId       String   @map("user_id")

    coordinates Unsupported("geometry(Point, 4326)")?

    Images   PrestationImage[]
    Category Category          @relation(fields: [categoryName], references: [name])
    User     User              @relation(fields: [userId], references: [id], onDelete: Cascade)
    Likes    PrestationLike[]
    Rates    Rate[]

    @@index([coordinates], name: "prestations_idx", type: Gist)
    @@map("prestations")
}

model PrestationLike {
    prestationId String @map("prestation_id")
    userId       String @map("user_id")

    Prestation Prestation @relation(fields: [prestationId], references: [id])
    User       User       @relation(fields: [userId], references: [id])

    @@id([prestationId, userId])
    @@map("prestation_likes")
}

model Book {
    id          String @id @default(cuid())
    description String

    coordinates Unsupported("geometry(Point, 4326)")?

    @@index([coordinates], name: "books_idx", type: Gist)
    @@map("books")
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime? @map("email_verified")
    image         String?
    createdAt     DateTime  @default(now()) @map("created_at")
    updatedAt     DateTime  @updatedAt @map("updated_at")

    Accounts    Account[]
    Sessions    Session[]
    Prestations Prestation[]
    Likes       PrestationLike[]
    Rates       Rate[]

    @@map("users")
}

model Account {
    id                 String  @id @default(cuid())
    userId             String  @map("user_id")
    type               String
    provider           String
    providerAccountId  String  @map("provider_account_id")
    refresh_token      String? @db.Text
    access_token       String?
    expires_at         Int?
    token_type         String?
    scope              String?
    id_token           String?
    session_state      String?
    oauth_token_secret String?
    oauth_token        String?

    User User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    expires      DateTime
    userId       String   @map("user_id")

    User User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model VerificationToken {
    id         Int      @id @default(autoincrement())
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verification_tokens")
}
