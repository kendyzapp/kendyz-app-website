/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/token": {
    /** @description Returns a JWT maps access token that you use to call the service API. */
    get: operations["token"];
  };
  "/searchAutocomplete": {
    /** @description Find results that you can use to autocomplete searches. */
    get: operations["searchAutocomplete"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** @description An object that describes a location in terms of its longitude and latitude. */
    Location: {
      /**
       * Format: double 
       * @description A double value that describes the latitude of the coordinate.
       */
      latitude: number;
      /**
       * Format: double 
       * @description A double value that describes the longitude of the coordinate.
       */
      longitude: number;
    };
    /** @description An object that describes the detailed address components of a place. */
    StructuredAddress: {
      /** @description The state or province of the place. */
      administrativeArea: string;
      /** @description The short code for the state or area. */
      administrativeAreaCode: string;
      /** @description Common names of the area in which the place resides. */
      areaOfInterest: string;
      /** @description Common names for the local area or neighborhood of the place. */
      dependentLocalities: (string)[];
      /** @description A combination of thoroughfare and subthoroughfare. */
      fullThoroughfare: string;
      /** @description The city of the place. */
      locality?: string;
      /** @description The postal code of the place. */
      postCode: string;
      /** @description The name of the area within the locality. */
      subLocality: string;
      /** @description The number on the street at the place */
      subThoroughfare: string;
      /** @description The street name at the place. */
      thoroughfare: string;
    };
    /** @description An object that contains information you can use to suggest addresses and further refine search results. */
    AutocompleteResult: {
      /** @description The relative URI to the search endpoint to use to fetch more details pertaining to the result. If available, the framework encodes opaque data about the autocomplete result in the completion URL’s metadata parameter. If clients need to fetch the search result in a certain language, they’re responsible for specifying the lang parameter in the request */
      completionUrl: string;
      /** @description A JSON string array to use to create a long form of display text for the completion result. */
      displayLines: (string)[];
      /** @description A Location object that specifies the location for the request in terms of its latitude and longitude. */
      location: components["schemas"]["Location"];
      /** @description A StructuredAddress object that describes the detailed address components of a place. */
      structuredAddress: components["schemas"]["StructuredAddress"];
    };
    /** @description An array of autocomplete results. */
    SearchAutocompleteResponse: {
      /** @description An array of AutocompleteResult objects. */
      results: (components["schemas"]["AutocompleteResult"])[];
    };
    /** @description Information about an error that occurs while processing a request. */
    ErrorResponse: {
      /** @description An array of strings with additional details about the error */
      details: (string)[];
      /** @description A message that provides details about the error. */
      message: string;
    };
    /** @description An object that contains an access token and an expiration time in seconds. */
    TokenReponse: {
      /** @description A string that represents the access token. */
      accessToken: string;
      /** @description An integer that indicates the time, in seconds from now until the token expires. */
      expiresInSeconds: number;
    };
    /**
     * @description A string that describes a specific point of interest (POI) category. 
     * @enum {string}
     */
    PoiCategory: "Airport" | "AirportGate" | "AirportTerminal" | "AmusementPark" | "ATM" | "Aquarium" | "Bakery" | "Bank" | "Beach" | "Brewery" | "Cafe" | "Campground" | "CarRental" | "EVCharger" | "FireStation" | "FitnessCenter" | "FoodMarket" | "GasStation" | "Hospital" | "Hotel" | "Laundry" | "Library" | "Marina" | "MovieTheater" | "Museum" | "NationalPark" | "Nightlife" | "Park" | "Parking" | "Pharmacy" | "Playground" | "Police" | "PostOffice" | "PublicTransport" | "ReligiousSite" | "Restaurant" | "Restroom" | "School" | "Stadium" | "Store" | "Theater" | "University" | "Winery" | "Zoo";
  };
  responses: {
    /** @description Bad Request */
    400: {
      content: {
        "application/json": components["schemas"]["ErrorResponse"];
      };
    };
    /** @description Unauthorized */
    401: {
      content: {
        "application/json": components["schemas"]["ErrorResponse"];
      };
    };
    /** @description Too Many Requests */
    429: {
      content: {
        "application/json": components["schemas"]["ErrorResponse"];
      };
    };
    /** @description Internal Server Error */
    500: {
      content: {
        "application/json": components["schemas"]["ErrorResponse"];
      };
    };
  };
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  /** @description Returns a JWT maps access token that you use to call the service API. */
  token: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TokenReponse"];
        };
      };
      401: components["responses"]["401"];
      429: components["responses"]["429"];
      500: components["responses"]["500"];
    };
  };
  /** @description Find results that you can use to autocomplete searches. */
  searchAutocomplete: {
    parameters: {
      query: {
        /**
         * @description The query to autocomplete. For example, q=eiffel. 
         * @example eiffel
         */
        q: string;
        /**
         * @description A comma-separated list of strings that describes the points of interest to exclude from the search results. For example, excludePoiCategories=Restaurant,Cafe. 
         * @example Restaurant,Cafe
         */
        excludePoiCategories?: (components["schemas"]["PoiCategory"])[];
        /**
         * @description A comma-separated list of strings that describes the points of interest to include in the search results. For example, includePoiCategories=Restaurant,Cafe. 
         * @example Restaurant,Cafe
         */
        includePoiCategories?: (components["schemas"]["PoiCategory"])[];
        /**
         * @description The language the server uses when returning the response, specified using a BCP 47 language code. For example, for English, use lang=en-US. 
         * @example en-US
         */
        lang?: string;
        /**
         * @description The language the server uses when returning the response, specified using a BCP 47 language code. For example, for English, use lang=en-US. 
         * @example US,CA
         */
        limitToCountries?: (string)[];
        /**
         * @description A comma-separated list of strings that describes the kind of result types to include in the response. For example, resultTypeFilter=Poi. 
         * @example Poi
         */
        resultTypeFilter?: ("Address" | "Poi" | "Query")[];
        /**
         * @description A location the app defines as a hint. Specify the location as a comma-separated string containing the latitude and longitude. For example, searchLocation=37.78,-122.42. If you don’t provide a searchLocation, the server uses userLocation and searchRegion as fallback hints. 
         * @example 37.78,-122.42
         */
        searchLocation?: string;
        /**
         * @description A region the app defines as a hint for the search. Specify the region as a comma-separated string that describes the region in the form of a north-latitude, east-longitude, south-latitude, west-longitude string. If you don’t provide searchLocation, the server uses userLocation and searchRegion as fallback hints. For example, searchRegion=38,-122.1,37.5,-122.5. 
         * @example 38,-122.1,37.5,-122.5
         */
        searchRegion?: string;
        /**
         * @description The location of the user, specified as a comma-separated string that contains the latitude and longitude. For example, userLocation=37.78,-122.42. Certain APIs, such as Search, may opt to use the userLocation, if specified, as a fallback for the searchLocation. 
         * @example 37.78,-122.42
         */
        userLocation?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["SearchAutocompleteResponse"];
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      429: components["responses"]["429"];
      500: components["responses"]["500"];
    };
  };
}
